/*
* generated by Xtext
*/
package anl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import anl.services.AnimationsLanguageGrammarAccess;

public class AnimationsLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private AnimationsLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected anl.ui.contentassist.antlr.internal.InternalAnimationsLanguageParser createParser() {
		anl.ui.contentassist.antlr.internal.InternalAnimationsLanguageParser result = new anl.ui.contentassist.antlr.internal.InternalAnimationsLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSimpleAnimationAccess().getAlternatives(), "rule__SimpleAnimation__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
					put(grammarAccess.getAnimationAccess().getGroup(), "rule__Animation__Group__0");
					put(grammarAccess.getAnimationAccess().getGroup_1(), "rule__Animation__Group_1__0");
					put(grammarAccess.getAnimationAccess().getGroup_1_3(), "rule__Animation__Group_1_3__0");
					put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
					put(grammarAccess.getHideAccess().getGroup(), "rule__Hide__Group__0");
					put(grammarAccess.getShowAccess().getGroup(), "rule__Show__Group__0");
					put(grammarAccess.getWaitAccess().getGroup(), "rule__Wait__Group__0");
					put(grammarAccess.getSequenceAccess().getGroup(), "rule__Sequence__Group__0");
					put(grammarAccess.getSequenceAccess().getGroup_3(), "rule__Sequence__Group_3__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getAnimationAccess().getComponentsAssignment_1_2(), "rule__Animation__ComponentsAssignment_1_2");
					put(grammarAccess.getAnimationAccess().getComponentsAssignment_1_3_1(), "rule__Animation__ComponentsAssignment_1_3_1");
					put(grammarAccess.getMoveAccess().getSpeedAssignment_3(), "rule__Move__SpeedAssignment_3");
					put(grammarAccess.getShowAccess().getShapeAssignment_3(), "rule__Show__ShapeAssignment_3");
					put(grammarAccess.getWaitAccess().getTimeAssignment_3(), "rule__Wait__TimeAssignment_3");
					put(grammarAccess.getSequenceAccess().getComponentsAssignment_2(), "rule__Sequence__ComponentsAssignment_2");
					put(grammarAccess.getSequenceAccess().getComponentsAssignment_3_1(), "rule__Sequence__ComponentsAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			anl.ui.contentassist.antlr.internal.InternalAnimationsLanguageParser typedParser = (anl.ui.contentassist.antlr.internal.InternalAnimationsLanguageParser) parser;
			typedParser.entryRuleAnimation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AnimationsLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AnimationsLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
