/*
* generated by Xtext
*/

package anl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AnimationsLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnimationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Animation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleAnimationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cSequenceComponentsAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cComponentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cComponentsSimpleAnimationParserRuleCall_1_2_0 = (RuleCall)cComponentsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cComponentsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cComponentsSimpleAnimationParserRuleCall_1_3_1_0 = (RuleCall)cComponentsAssignment_1_3_1.eContents().get(0);
		
		//Animation:
		//	SimpleAnimation (";" {Sequence.components+=current} components+=SimpleAnimation (";" components+=SimpleAnimation)*)?;
		public ParserRule getRule() { return rule; }

		//SimpleAnimation (";" {Sequence.components+=current} components+=SimpleAnimation (";" components+=SimpleAnimation)*)?
		public Group getGroup() { return cGroup; }

		//SimpleAnimation
		public RuleCall getSimpleAnimationParserRuleCall_0() { return cSimpleAnimationParserRuleCall_0; }

		//(";" {Sequence.components+=current} components+=SimpleAnimation (";" components+=SimpleAnimation)*)?
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//{Sequence.components+=current}
		public Action getSequenceComponentsAction_1_1() { return cSequenceComponentsAction_1_1; }

		//components+=SimpleAnimation
		public Assignment getComponentsAssignment_1_2() { return cComponentsAssignment_1_2; }

		//SimpleAnimation
		public RuleCall getComponentsSimpleAnimationParserRuleCall_1_2_0() { return cComponentsSimpleAnimationParserRuleCall_1_2_0; }

		//(";" components+=SimpleAnimation)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//";"
		public Keyword getSemicolonKeyword_1_3_0() { return cSemicolonKeyword_1_3_0; }

		//components+=SimpleAnimation
		public Assignment getComponentsAssignment_1_3_1() { return cComponentsAssignment_1_3_1; }

		//SimpleAnimation
		public RuleCall getComponentsSimpleAnimationParserRuleCall_1_3_1_0() { return cComponentsSimpleAnimationParserRuleCall_1_3_1_0; }
	}

	public class SimpleAnimationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAnimation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHideParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cShowParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWaitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSequenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SimpleAnimation returns Animation:
		//	Move | Hide | Show | Wait | Sequence;
		public ParserRule getRule() { return rule; }

		//Move | Hide | Show | Wait | Sequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//Move
		public RuleCall getMoveParserRuleCall_0() { return cMoveParserRuleCall_0; }

		//Hide
		public RuleCall getHideParserRuleCall_1() { return cHideParserRuleCall_1; }

		//Show
		public RuleCall getShowParserRuleCall_2() { return cShowParserRuleCall_2; }

		//Wait
		public RuleCall getWaitParserRuleCall_3() { return cWaitParserRuleCall_3; }

		//Sequence
		public RuleCall getSequenceParserRuleCall_4() { return cSequenceParserRuleCall_4; }
	}

	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeedEDoubleParserRuleCall_3_0 = (RuleCall)cSpeedAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGeoTrackAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGeoTrackEStringParserRuleCall_5_0 = (RuleCall)cGeoTrackAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Move:
		//	{Move} "move" "(" speed=EDouble "," geoTrack=EString ")";
		public ParserRule getRule() { return rule; }

		//{Move} "move" "(" speed=EDouble "," geoTrack=EString ")"
		public Group getGroup() { return cGroup; }

		//{Move}
		public Action getMoveAction_0() { return cMoveAction_0; }

		//"move"
		public Keyword getMoveKeyword_1() { return cMoveKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//speed=EDouble
		public Assignment getSpeedAssignment_3() { return cSpeedAssignment_3; }

		//EDouble
		public RuleCall getSpeedEDoubleParserRuleCall_3_0() { return cSpeedEDoubleParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//geoTrack=EString
		public Assignment getGeoTrackAssignment_5() { return cGeoTrackAssignment_5; }

		//EString
		public RuleCall getGeoTrackEStringParserRuleCall_5_0() { return cGeoTrackEStringParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class HideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHideAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHideKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSimplePositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSimplePositionEStringParserRuleCall_3_0 = (RuleCall)cSimplePositionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Hide:
		//	{Hide} "hide" "(" simplePosition=EString ")";
		public ParserRule getRule() { return rule; }

		//{Hide} "hide" "(" simplePosition=EString ")"
		public Group getGroup() { return cGroup; }

		//{Hide}
		public Action getHideAction_0() { return cHideAction_0; }

		//"hide"
		public Keyword getHideKeyword_1() { return cHideKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//simplePosition=EString
		public Assignment getSimplePositionAssignment_3() { return cSimplePositionAssignment_3; }

		//EString
		public RuleCall getSimplePositionEStringParserRuleCall_3_0() { return cSimplePositionEStringParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ShowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Show");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSimplePositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSimplePositionEStringParserRuleCall_3_0 = (RuleCall)cSimplePositionAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cShapeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cShapeEStringParserRuleCall_5_0 = (RuleCall)cShapeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Show:
		//	{Show} "show" "(" simplePosition=EString "," shape=EString ")";
		public ParserRule getRule() { return rule; }

		//{Show} "show" "(" simplePosition=EString "," shape=EString ")"
		public Group getGroup() { return cGroup; }

		//{Show}
		public Action getShowAction_0() { return cShowAction_0; }

		//"show"
		public Keyword getShowKeyword_1() { return cShowKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//simplePosition=EString
		public Assignment getSimplePositionAssignment_3() { return cSimplePositionAssignment_3; }

		//EString
		public RuleCall getSimplePositionEStringParserRuleCall_3_0() { return cSimplePositionEStringParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//shape=EString
		public Assignment getShapeAssignment_5() { return cShapeAssignment_5; }

		//EString
		public RuleCall getShapeEStringParserRuleCall_5_0() { return cShapeEStringParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWaitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeEDoubleParserRuleCall_3_0 = (RuleCall)cTimeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Wait:
		//	{Wait} "wait" "(" time=EDouble ")";
		public ParserRule getRule() { return rule; }

		//{Wait} "wait" "(" time=EDouble ")"
		public Group getGroup() { return cGroup; }

		//{Wait}
		public Action getWaitAction_0() { return cWaitAction_0; }

		//"wait"
		public Keyword getWaitKeyword_1() { return cWaitKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//time=EDouble
		public Assignment getTimeAssignment_3() { return cTimeAssignment_3; }

		//EDouble
		public RuleCall getTimeEDoubleParserRuleCall_3_0() { return cTimeEDoubleParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentsSimpleAnimationParserRuleCall_2_0 = (RuleCall)cComponentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cComponentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cComponentsSimpleAnimationParserRuleCall_3_1_0 = (RuleCall)cComponentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sequence:
		//	{Sequence} "[" components+=SimpleAnimation (";" components+=SimpleAnimation)* "]";
		public ParserRule getRule() { return rule; }

		//{Sequence} "[" components+=SimpleAnimation (";" components+=SimpleAnimation)* "]"
		public Group getGroup() { return cGroup; }

		//{Sequence}
		public Action getSequenceAction_0() { return cSequenceAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//components+=SimpleAnimation
		public Assignment getComponentsAssignment_2() { return cComponentsAssignment_2; }

		//SimpleAnimation
		public RuleCall getComponentsSimpleAnimationParserRuleCall_2_0() { return cComponentsSimpleAnimationParserRuleCall_2_0; }

		//(";" components+=SimpleAnimation)*
		public Group getGroup_3() { return cGroup_3; }

		//";"
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }

		//components+=SimpleAnimation
		public Assignment getComponentsAssignment_3_1() { return cComponentsAssignment_3_1; }

		//SimpleAnimation
		public RuleCall getComponentsSimpleAnimationParserRuleCall_3_1_0() { return cComponentsSimpleAnimationParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"E" | "e"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"E"
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//"e"
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	
	private AnimationElements pAnimation;
	private SimpleAnimationElements pSimpleAnimation;
	private MoveElements pMove;
	private HideElements pHide;
	private ShowElements pShow;
	private WaitElements pWait;
	private SequenceElements pSequence;
	private EStringElements pEString;
	private EDoubleElements pEDouble;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AnimationsLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("anl.AnimationsLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Animation:
	//	SimpleAnimation (";" {Sequence.components+=current} components+=SimpleAnimation (";" components+=SimpleAnimation)*)?;
	public AnimationElements getAnimationAccess() {
		return (pAnimation != null) ? pAnimation : (pAnimation = new AnimationElements());
	}
	
	public ParserRule getAnimationRule() {
		return getAnimationAccess().getRule();
	}

	//SimpleAnimation returns Animation:
	//	Move | Hide | Show | Wait | Sequence;
	public SimpleAnimationElements getSimpleAnimationAccess() {
		return (pSimpleAnimation != null) ? pSimpleAnimation : (pSimpleAnimation = new SimpleAnimationElements());
	}
	
	public ParserRule getSimpleAnimationRule() {
		return getSimpleAnimationAccess().getRule();
	}

	//Move:
	//	{Move} "move" "(" speed=EDouble "," geoTrack=EString ")";
	public MoveElements getMoveAccess() {
		return (pMove != null) ? pMove : (pMove = new MoveElements());
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}

	//Hide:
	//	{Hide} "hide" "(" simplePosition=EString ")";
	public HideElements getHideAccess() {
		return (pHide != null) ? pHide : (pHide = new HideElements());
	}
	
	public ParserRule getHideRule() {
		return getHideAccess().getRule();
	}

	//Show:
	//	{Show} "show" "(" simplePosition=EString "," shape=EString ")";
	public ShowElements getShowAccess() {
		return (pShow != null) ? pShow : (pShow = new ShowElements());
	}
	
	public ParserRule getShowRule() {
		return getShowAccess().getRule();
	}

	//Wait:
	//	{Wait} "wait" "(" time=EDouble ")";
	public WaitElements getWaitAccess() {
		return (pWait != null) ? pWait : (pWait = new WaitElements());
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}

	//Sequence:
	//	{Sequence} "[" components+=SimpleAnimation (";" components+=SimpleAnimation)* "]";
	public SequenceElements getSequenceAccess() {
		return (pSequence != null) ? pSequence : (pSequence = new SequenceElements());
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
